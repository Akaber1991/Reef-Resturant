import { FRAME_EVENT, FRAME_EVENT_ORIGINS, ENVIRONMENTS } from '../types';
export declare enum PROFILE_FRAME_COMMANDS {
    SET_SIZE = "profile:setSize",
    LOADING_DONE = "profile:loadingDone",
    EDIT = "profile:edit"
}
export declare enum PROFILE_EDITABLE_FIELDS {
    EXPERIENCE = "experience",
    ACCOMPLISHMENTS = "accomplishments",
    SOCIALS = "socials",
    AVATAR = "override_avatar_url",
    LOCATION = "location",
    DESCRIPTION = "description",
    VISIBLE = "visible",
    LANGUAGES = "top_languages",
    DOMAINS = "domain_data",
    DEPARTMENTS = "department_data",
    FAVORITES = "favorites"
}
export declare enum PROFILE_EDIT_ACTIONS {
    CREATE = "create",
    EDIT = "edit",
    DELETE = "delete"
}
export interface PROFILE_FRAME_EVENT extends FRAME_EVENT {
    command: PROFILE_FRAME_COMMANDS;
    origin: FRAME_EVENT_ORIGINS.PROFILE | FRAME_EVENT_ORIGINS.MOCK_PROFILE;
    visible: boolean;
    id: string;
}
export interface SET_SIZE_PROFILE_FRAME_EVENT extends PROFILE_FRAME_EVENT {
    value: number;
}
export interface EDIT_PROFILE_FRAME_EVENT extends PROFILE_FRAME_EVENT {
    field: PROFILE_EDITABLE_FIELDS;
    action: PROFILE_EDIT_ACTIONS;
    developer_profile_id: string;
    admin_profile_id: string;
    originalValue: any;
    newValue: any;
}
export interface PROFILE_FRAME_EVENT_RESPONSE extends FRAME_EVENT {
    success: boolean;
    field: PROFILE_EDITABLE_FIELDS;
    rollbackValue?: any;
}
export interface ProfileProps {
    profile_id: string;
    environment?: ENVIRONMENTS;
    frameTitle?: string;
    className?: string;
    enableEditing?: boolean;
    handleFieldUpdate?: (developer_profile_id: string, field: PROFILE_EDITABLE_FIELDS, value: any) => Promise<boolean>;
    fullScreen?: boolean;
    onReady?: (visible?: boolean) => void;
    disableChrome?: boolean;
    frameless?: boolean;
}
