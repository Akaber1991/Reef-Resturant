import React, {
	useCallback,
	useState,
	useMemo,
	useEffect,
	useRef,
} from 'react';
import Loader from '@pinpt/uic.next/Loader';
import {
	ProfileProps,
	PROFILE_FRAME_EVENT,
	PROFILE_FRAME_COMMANDS,
	SET_SIZE_PROFILE_FRAME_EVENT,
	EDIT_PROFILE_FRAME_EVENT,
	PROFILE_FRAME_EVENT_RESPONSE,
} from './types';
import styles from './styles.less';
import {
	FRAME_EVENT_ORIGINS,
	FRAME_MESSAGE,
	ENVIRONMENTS,
} from '../types';
import { getCardEmbedUrl } from '../util';


const Card = (props: ProfileProps) => {
	const { handleFieldUpdate, onReady } = props;
	const [loading, setLoading] = useState<boolean>(true);
	const [height, setHeight] = useState<number>(0);
	const frameRef = useRef<HTMLIFrameElement>(null);

	const frameClasses = useMemo<string>(() => {
		const result = [styles.Frame];

		if (loading) {
			result.push(styles.Loading);
		}

		return result.join(' ');
	}, [loading]);

	const loaderClasses = useMemo<string>(() => {
		const result = [styles.Loader];

		if (loading) {
			result.push(styles.Loading);
		}

		return result.join(' ');
	}, [loading]);

	const wrapperClasses = useMemo<string>(() => {
		const result = [styles.ProfileWrapper];

		if (props.className) {
			result.push(props.className);
		}

		return result.join(' ');
	}, [props.className]);

	const handleRollBackChange = useCallback((field: string, rollbackValue: any): boolean => {
		if (frameRef.current?.contentWindow?.postMessage) {
			frameRef.current.contentWindow.postMessage({
				success: false,
				field,
				rollbackValue,
				origin: FRAME_EVENT_ORIGINS.WEBAPP_SETTINGS,
			} as PROFILE_FRAME_EVENT_RESPONSE, '*');
		}
		return false;
	}, []);

	const handleSucceedChange = useCallback((field: string): boolean => {
		if (frameRef.current?.contentWindow?.postMessage) {
			frameRef.current.contentWindow.postMessage({
				success: true,
				field,
				origin: FRAME_EVENT_ORIGINS.WEBAPP_SETTINGS,
			} as PROFILE_FRAME_EVENT_RESPONSE, '*');
		}
		return false;
	}, []);

	const handleFrameEditMessage = useCallback(async (event: EDIT_PROFILE_FRAME_EVENT): Promise<boolean> => {
		const {
			field,
			developer_profile_id,
			newValue,
			originalValue,
		} = event;

		if (handleFieldUpdate) {
			try {
				const result = await handleFieldUpdate(developer_profile_id, field, newValue);
				if (result) {
					handleSucceedChange(field);
					return true;
				}
				return handleRollBackChange(field, originalValue);
			} catch (e) {
				return handleRollBackChange(field, originalValue);
			}
		}

		// In the future we may want to roll back the change if there is no handler passed
		// so that the UI doesn't update to show a state that doesn't match the database,
		// but for now don't roll back because that would make this hard to test in isolation
		return false;
	}, [handleFieldUpdate, handleRollBackChange, handleSucceedChange]);

	const handleMessage = useCallback(async (message: FRAME_MESSAGE): Promise<boolean> => {
		const { data } = message;

		if (data && data.origin === FRAME_EVENT_ORIGINS.PROFILE) {
			const event = data as PROFILE_FRAME_EVENT;
			if (event.id === props.profile_id) {
				switch (event.command) {
					case PROFILE_FRAME_COMMANDS.SET_SIZE: {
						const { value: size } = event as SET_SIZE_PROFILE_FRAME_EVENT;
						setHeight(size);
						return true;
					}
					case PROFILE_FRAME_COMMANDS.LOADING_DONE: {
						setLoading(false);
						if (onReady) {
							onReady(event.visible);
						}
						return true;
					}
					case PROFILE_FRAME_COMMANDS.EDIT: {
						return handleFrameEditMessage(event as EDIT_PROFILE_FRAME_EVENT);
					}
					default:
						return false;
				}
			}
			return false;
		}

		return false;
	}, [setHeight, setLoading, handleFrameEditMessage, onReady, props.profile_id]);

	const style: { [property: string]: string } = useMemo(() => {
		return {
			// Add 2 for the borders
			height: `${height + 2}px`,
		};
	}, [height]);

	useEffect(() => {
		window.addEventListener('message', handleMessage);

		return () => {
			window.removeEventListener('message', handleMessage);
		};
	}, [handleMessage]);

	return (
		<div className={wrapperClasses}>
			<iframe
				src={getCardEmbedUrl(
					props.environment ?? ENVIRONMENTS.STABLE,
					props.profile_id,
					props.enableEditing ?? false,
					props.fullScreen ?? false,
					props.disableChrome ?? false,
					props.frameless ?? false
				)}
				title={props.frameTitle ?? 'Developer Profile'}
				className={frameClasses}
				style={style}
				scrolling="yes"
				ref={frameRef}
			/>
			<div className={loaderClasses}>
				<Loader screen />
			</div>
		</div>
	);
};

export {
	ProfileProps,
	PROFILE_FRAME_COMMANDS,
	PROFILE_FRAME_EVENT,
	SET_SIZE_PROFILE_FRAME_EVENT,
	PROFILE_EDITABLE_FIELDS,
	PROFILE_EDIT_ACTIONS,
	EDIT_PROFILE_FRAME_EVENT,
	PROFILE_FRAME_EVENT_RESPONSE,
} from './types';

export default Card;
