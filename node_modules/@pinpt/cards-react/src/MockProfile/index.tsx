import React, {
	useCallback,
	useState,
	useMemo,
	useEffect,
	useRef,
} from 'react';
import Loader from '@pinpt/uic.next/Loader';
import {
	PROFILE_FRAME_EVENT,
	PROFILE_FRAME_COMMANDS,
	SET_SIZE_PROFILE_FRAME_EVENT,
} from '../Profile/types';
import {
	MockProfileProps
} from './types';
import styles from '../Profile/styles.less';
import {
	FRAME_EVENT_ORIGINS,
	FRAME_MESSAGE,
} from '../types';
import { getMockCardEmbedUrl } from '../util';


const Card = (props: MockProfileProps) => {
	const { onReady } = props;
	const [loading, setLoading] = useState<boolean>(true);
	const [height, setHeight] = useState<number>(0);
	const frameRef = useRef<HTMLIFrameElement>(null);

	const frameClasses = useMemo<string>(() => {
		const result = [styles.Frame];

		if (loading) {
			result.push(styles.Loading);
		}

		return result.join(' ');
	}, [loading]);

	const loaderClasses = useMemo<string>(() => {
		const result = [styles.Loader];

		if (loading) {
			result.push(styles.Loading);
		}

		return result.join(' ');
	}, [loading]);

	const wrapperClasses = useMemo<string>(() => {
		const result = [styles.ProfileWrapper];

		if (props.className) {
			result.push(props.className);
		}

		return result.join(' ');
	}, [props.className]);


	const handleMessage = useCallback(async (message: FRAME_MESSAGE): Promise<boolean> => {
		const { data } = message;

		if (data && data.origin === FRAME_EVENT_ORIGINS.MOCK_PROFILE) {
			const event = data as PROFILE_FRAME_EVENT;
			switch (event.command) {
				case PROFILE_FRAME_COMMANDS.SET_SIZE: {
					const { value: size } = event as SET_SIZE_PROFILE_FRAME_EVENT;
					setHeight(size);
					return true;
				}
				case PROFILE_FRAME_COMMANDS.LOADING_DONE: {
					setLoading(false);
					if (onReady) {
						onReady(event.visible);
					}
					return true;
				}
				default:
					return false;
			}
		}

		return false;
	}, [setHeight, setLoading, onReady]);

	const style: { [property: string]: string } = useMemo(() => {
		return {
			// Add 2 for the borders
			height: `${height + 2}px`,
		};
	}, [height]);

	useEffect(() => {
		window.addEventListener('message', handleMessage);

		return () => {
			window.removeEventListener('message', handleMessage);
		};
	}, [handleMessage]);

	return (
		<div className={wrapperClasses}>
			<iframe
				src={getMockCardEmbedUrl(props.avatar, props.firstName, props.lastName)}
				title={props.frameTitle ?? 'Developer Profile'}
				className={frameClasses}
				style={style}
				scrolling="yes"
				ref={frameRef}
			/>
			<div className={loaderClasses}>
				<Loader screen />
			</div>
		</div>
	);
};

export { MockProfileProps } from './types';

export default Card;
