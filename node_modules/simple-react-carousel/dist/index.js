function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var styled = _interopDefault(require('styled-components'));

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _taggedTemplateLiteralLoose(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }

  strings.raw = raw;
  return strings;
}

var defaultControlsOptions = {
  show: true,
  position: "middle",
  leftControlIcon: null,
  rightControlIcon: null,
  backgroundColor: "rgba(0, 0, 0, 0.75)",
  shape: "rectangle",
  width: "auto",
  height: "auto",
  iconHeight: "32",
  iconWidth: "32",
  iconFill: "#FFFFFF",
  borderRadius: "3px"
};
var defaultIndicatorOptions = {
  show: true,
  shape: "pill",
  height: "5px",
  width: "20px",
  activeColor: "rgba(0,0,0,0.75)",
  inactiveColor: "rgba(255,255,255,0.75)",
  border: "none",
  boxShadow: "0 0 3px rgba(0, 0, 0, 0.16), 0 0 3px rgba(0, 0, 0, 0.23)"
};

var store = React.createContext({});
var Provider = store.Provider;

var StateProvider = function StateProvider(_ref) {
  var children = _ref.children,
      _ref$childCount = _ref.childCount,
      childCount = _ref$childCount === void 0 ? 0 : _ref$childCount,
      _ref$autoPlay = _ref.autoPlay,
      autoPlay = _ref$autoPlay === void 0 ? false : _ref$autoPlay,
      _ref$autoChangeTime = _ref.autoChangeTime,
      autoChangeTime = _ref$autoChangeTime === void 0 ? 3 : _ref$autoChangeTime,
      _ref$contentCoversCon = _ref.contentCoversContainer,
      contentCoversContainer = _ref$contentCoversCon === void 0 ? true : _ref$contentCoversCon,
      _ref$itemFit = _ref.itemFit,
      itemFit = _ref$itemFit === void 0 ? "contain" : _ref$itemFit,
      controlsOptions = _ref.controlsOptions,
      indicatorOptions = _ref.indicatorOptions,
      _ref$slideTransitionV = _ref.slideTransitionValue,
      slideTransitionValue = _ref$slideTransitionV === void 0 ? 0.3 : _ref$slideTransitionV,
      _ref$currentSlideTran = _ref.currentSlideTransition,
      currentSlideTransition = _ref$currentSlideTran === void 0 ? slideTransitionValue : _ref$currentSlideTran;

  var _useReducer = React.useReducer(function (state, _ref2) {
    var type = _ref2.type,
        payload = _ref2.payload;

    switch (type) {
      case "updateActiveItem":
        return _extends({}, state, {
          activeItem: payload
        });

      case "setCarouselWidth":
        return _extends({}, state, {
          carouselWidth: payload
        });

      case "setTranslateValue":
        return _extends({}, state, {
          translateValue: payload
        });

      case "setToSpecificItem":
        {
          return _extends({}, state, {
            activeItem: payload,
            translateValue: state.translateValue + state.carouselWidth
          });
        }

      case "setNextItem":
        {
          return _extends({}, state, {
            translateValue: state.translateValue + state.carouselWidth,
            activeItem: state.activeItem === childCount - 1 ? 0 : state.activeItem + 1
          });
        }

      case "setPreviousItem":
        {
          return _extends({}, state, {
            translateValue: 0,
            activeItem: state.activeItem === 0 ? childCount - 1 : state.activeItem - 1
          });
        }

      case "setActiveSlidesArray":
        {
          return _extends({}, state, {
            activeSlides: payload
          });
        }

      case "setCurrentSlideTransitionValue":
        {
          return _extends({}, state, {
            currentSlideTransition: payload
          });
        }

      case "triggerSlideTransition":
        {
          return _extends({}, state, {}, payload);
        }

      case "handleWindowResize":
        {
          return _extends({}, state, {}, payload);
        }

      default:
        return state;
    }
  }, {
    activeItem: 0,
    childCount: childCount,
    translateValue: 0,
    carouselWidth: 0,
    autoPlay: autoPlay,
    autoChangeTime: autoChangeTime,
    contentCoversContainer: contentCoversContainer,
    itemFit: itemFit,
    controlsOptions: _extends({}, defaultControlsOptions, {}, controlsOptions),
    indicatorOptions: _extends({}, defaultIndicatorOptions, {}, indicatorOptions),
    activeSlides: [],
    slideTransitionValue: slideTransitionValue,
    currentSlideTransition: currentSlideTransition
  }),
      state = _useReducer[0],
      dispatch = _useReducer[1];

  return /*#__PURE__*/React__default.createElement(Provider, {
    value: {
      state: state,
      dispatch: dispatch
    }
  }, children);
};

function _templateObject2() {
  var data = _taggedTemplateLiteralLoose(["\n  position: relative;\n  display: inherit;\n  max-width: 100%;\n  width: 100%;\n  flex: ", ";\n  height: 100%;\n\n  > *:first-child {\n    max-width: 100%;\n    width: ", ";\n    flex: ", ";\n    object-fit: ", ";\n  }\n"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteralLoose(["\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}
var Item = styled.li(_templateObject());
var ChildWrapper = styled.div(_templateObject2(), function (_ref) {
  var coverContainer = _ref.coverContainer;
  return coverContainer ? "1" : "unset";
}, function (_ref2) {
  var width = _ref2.width;
  return width + "px";
}, function (_ref3) {
  var coverContainer = _ref3.coverContainer;
  return coverContainer ? "1" : "unset";
}, function (_ref4) {
  var coverContainer = _ref4.coverContainer,
      itemFit = _ref4.itemFit;
  return coverContainer ? itemFit : "unset";
});

var CarouselItem = function CarouselItem(_ref5) {
  var children = _ref5.children,
      index = _ref5.index,
      _ref5$overrideFit = _ref5.overrideFit,
      overrideFit = _ref5$overrideFit === void 0 ? false : _ref5$overrideFit;

  var _useContext = React.useContext(store),
      state = _useContext.state;

  var activeItem = state.activeItem,
      contentCoversContainer = state.contentCoversContainer,
      carouselWidth = state.carouselWidth,
      itemFit = state.itemFit,
      currentSlideTransition = state.currentSlideTransition;
  var objectFitValue = overrideFit || itemFit;
  return /*#__PURE__*/React__default.createElement(Item, {
    "data-testid": "carouselItem-" + index,
    active: index === activeItem,
    "data-active": index === activeItem,
    slideTransition: currentSlideTransition
  }, /*#__PURE__*/React__default.createElement(ChildWrapper, {
    coverContainer: contentCoversContainer,
    width: carouselWidth,
    itemFit: objectFitValue
  }, children));
};

var useWindowResizeEvent = function useWindowResizeEvent() {
  var getWindowWidth = function getWindowWidth() {
    return window.innerWidth;
  };

  var _useState = React.useState(getWindowWidth()),
      windowWidth = _useState[0],
      setWindowWidth = _useState[1];

  React.useEffect(function () {
    var resize = function resize() {
      setWindowWidth(getWindowWidth());
    };

    window.addEventListener("resize", resize);
    return function () {
      window.removeEventListener("resize", resize);
    };
  }, []);
  return windowWidth;
};

var NextChevron = function NextChevron(_ref) {
  var _ref$width = _ref.width,
      width = _ref$width === void 0 ? 80 : _ref$width,
      _ref$height = _ref.height,
      height = _ref$height === void 0 ? 80 : _ref$height,
      _ref$fill = _ref.fill,
      fill = _ref$fill === void 0 ? "#000000" : _ref$fill;
  return /*#__PURE__*/React__default.createElement("svg", {
    "data-testid": "next-chevron",
    role: "img",
    version: "1.1",
    xmlns: "http://www.w3.org/2000/svg",
    width: width,
    height: height,
    viewBox: "0 0 80 80",
    "aria-labelledby": "nextChevronId nextChevronDescId"
  }, /*#__PURE__*/React__default.createElement("title", {
    id: "nextChevronId"
  }, "Next Item"), /*#__PURE__*/React__default.createElement("desc", {
    id: "nextChevronDescId"
  }, "An arrow to go to the next item in the carousel"), /*#__PURE__*/React__default.createElement("path", {
    fill: fill,
    d: "M36.652 18.064c1.672 1.632 18.008 18.78 18.008 18.78 0.892 0.876 1.34 2.016 1.34 3.156s-0.448 2.28-1.34 3.148c0 0-16.336 17.156-18.008 18.78-1.672 1.632-4.68 1.744-6.46 0-1.784-1.736-1.924-4.164 0-6.296l14.988-15.632-14.988-15.632c-1.924-2.132-1.784-4.564 0-6.304 1.78-1.744 4.788-1.636 6.46 0z"
  }));
};

var PreviousChevron = function PreviousChevron(_ref) {
  var _ref$width = _ref.width,
      width = _ref$width === void 0 ? 80 : _ref$width,
      _ref$height = _ref.height,
      height = _ref$height === void 0 ? 80 : _ref$height,
      _ref$fill = _ref.fill,
      fill = _ref$fill === void 0 ? "#000000" : _ref$fill;
  return /*#__PURE__*/React__default.createElement("svg", {
    "data-testid": "previous-chevron",
    role: "img",
    version: "1.1",
    xmlns: "http://www.w3.org/2000/svg",
    width: width,
    height: height,
    viewBox: "0 0 80 80",
    "aria-labelledby": "previousChevronId previousChevronDescId"
  }, /*#__PURE__*/React__default.createElement("title", {
    id: "previousChevronId"
  }, "Previous Item"), /*#__PURE__*/React__default.createElement("desc", {
    id: "previousChevronDescId"
  }, "An arrow to go to the previous item in the carousel"), /*#__PURE__*/React__default.createElement("path", {
    fill: fill,
    d: "M49.808 18.064c1.784 1.744 1.924 4.172 0 6.304l-14.988 15.632 14.988 15.632c1.924 2.132 1.784 4.564 0 6.296-1.78 1.744-4.788 1.632-6.46 0-1.672-1.624-18.008-18.78-18.008-18.78-0.892-0.868-1.34-2.008-1.34-3.148s0.448-2.28 1.34-3.156c0 0 16.336-17.148 18.008-18.78 1.672-1.636 4.68-1.744 6.46 0z"
  }));
};

function _templateObject$1() {
  var data = _taggedTemplateLiteralLoose(["\n  position: absolute;\n  ", ";\n  z-index: 9;\n  top: ", ";\n\n  ", "\n\n  ", "\n\n\n  background: rgba(0, 0, 0, 0.75);\n  border: none;\n  padding: 0;\n  margin: 0;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding: 0.5rem 0;\n  transition: all ease\n    ", "s;\n  box-shadow: 0 0 3px rgba(0, 0, 0, 0.16), 0 0 3px rgba(0, 0, 0, 0.23);\n\n  &:hover {\n    cursor: pointer;\n\n    ", "\n  }\n"]);

  _templateObject$1 = function _templateObject() {
    return data;
  };

  return data;
}
var CarouselButtonElement = styled.button(_templateObject$1(), function (props) {
  return props.previous ? "left: 10px;" : "right: 10px;";
}, function (_ref) {
  var options = _ref.options;

  switch (options.position) {
    case "top":
      return "10px";

    case "bottom":
      return "calc(100% - (42px + 1rem))";

    default:
      return "50%";
  }
}, function (_ref2) {
  var options = _ref2.options;

  switch (options.shape) {
    case "circle":
      {
        if (options.width === "auto") {
          console.log("You haven't specified a width for the button!");
        }

        return "width: " + options.width + ";\n        height: " + options.width + ";\n        border-radius: 50%;";
      }

    case "square":
      {
        if (options.width === "auto") {
          console.log("You haven't specified a width for the button!");
        }

        return "width: " + options.width + ";\n        height: " + options.width + ";\n        border-radius: 0;";
      }

    default:
      return "\n            width: " + options.width + ";\n            height: " + options.height + ";\n            border-radius: " + options.borderRadius + ";\n          ";
  }
}, function (_ref3) {
  var options = _ref3.options;

  if (options.position === "middle") {
    return "transform: scale(1);";
  }
}, function (_ref4) {
  var currentSlideTransition = _ref4.currentSlideTransition;
  return currentSlideTransition;
}, function (_ref5) {
  var options = _ref5.options;

  if (options.position === "middle") {
    return "transform: scale(1.05);";
  } else {
    return "transform: scale(1.05)";
  }
});

var CarouselButton = function CarouselButton(_ref6) {
  var previous = _ref6.previous;

  var _useContext = React.useContext(store),
      state = _useContext.state,
      dispatch = _useContext.dispatch;

  var controlsOptions = state.controlsOptions,
      currentSlideTransition = state.currentSlideTransition;

  var handleNext = function handleNext() {
    dispatch({
      type: "setNextItem"
    });
  };

  var handlePrev = function handlePrev() {
    dispatch({
      type: "setPreviousItem"
    });
  };

  var handleClick = function handleClick() {
    if (previous) {
      handlePrev();
      return;
    }

    handleNext();
  };

  var renderButtonBody = function renderButtonBody() {
    if (previous) {
      if (controlsOptions.leftControlIcon && React__default.isValidElement(controlsOptions.leftControlIcon)) {
        return controlsOptions.leftControlIcon;
      }

      return /*#__PURE__*/React__default.createElement(PreviousChevron, {
        width: controlsOptions.iconWidth,
        height: controlsOptions.iconWidth,
        fill: controlsOptions.iconFill
      });
    }

    if (controlsOptions.rightControlIcon && React__default.isValidElement(controlsOptions.rightControlIcon)) {
      return controlsOptions.leftControlIcon;
    }

    return /*#__PURE__*/React__default.createElement(NextChevron, {
      width: controlsOptions.iconWidth,
      height: controlsOptions.iconWidth,
      fill: controlsOptions.iconFill
    });
  };

  return /*#__PURE__*/React__default.createElement(CarouselButtonElement, {
    onClick: handleClick,
    previous: previous,
    options: controlsOptions,
    currentSlideTransition: currentSlideTransition,
    "aria-label": (previous ? "Previous" : "Next") + " image button",
    type: "button"
  }, renderButtonBody());
};

function _templateObject2$1() {
  var data = _taggedTemplateLiteralLoose(["\n  ", "}\n  border: ", ";\n  background-color: ", ";\n  box-shadow: ", ";\n  transition: all 0.3s ease;\n\n  &:hover {\n    cursor: pointer;\n  }\n"]);

  _templateObject2$1 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject$2() {
  var data = _taggedTemplateLiteralLoose(["\n  display: flex;\n  flex-direction: row;\n  flex-wrap: nowrap;\n  justify-content: space-between;\n  margin: auto;\n  position: absolute;\n  bottom: 5px;\n  left: 0;\n  right: 0;\n"]);

  _templateObject$2 = function _templateObject() {
    return data;
  };

  return data;
}
var Wrapper = styled.div(_templateObject$2());
var Indicator = styled.button(_templateObject2$1(), function (_ref) {
  var options = _ref.options;

  switch (options.shape) {
    case "square":
      {
        return "width: " + options.width + ";\n          height: " + options.width + ";\n          border-radius: 0;\n          ";
      }

    case "circle":
      {
        return "width: " + options.width + ";\n          height: " + options.width + ";\n          border-radius: 50%;\n          ";
      }

    default:
      return "width: " + options.width + ";\n              height: " + options.height + ";\n              border-radius: 50px;";
  }
}, function (_ref2) {
  var options = _ref2.options;
  return options.border;
}, function (_ref3) {
  var active = _ref3.active,
      options = _ref3.options;
  return active ? options.activeColor : options.inactiveColor;
}, function (_ref4) {
  var options = _ref4.options;
  return options.boxShadow;
});

var Indicators = function Indicators() {
  var _useContext = React.useContext(store),
      state = _useContext.state,
      dispatch = _useContext.dispatch;

  var childCount = state.childCount,
      activeItem = state.activeItem,
      indicatorOptions = state.indicatorOptions;

  var _useState = React.useState(20 * childCount),
      wrapperWidth = _useState[0],
      setWrapperWidth = _useState[1];

  var handleClick = function handleClick(index) {
    dispatch({
      type: "setToSpecificItem",
      payload: index
    });
  };

  var renderIndicators = function renderIndicators() {
    return [].concat(Array(childCount).fill("")).map(function (_, index) {
      return /*#__PURE__*/React__default.createElement(Indicator, {
        key: "indicator-" + index,
        "data-testid": "indicator-" + index,
        "data-active": index === activeItem,
        active: index === activeItem,
        onClick: function onClick() {
          return handleClick(index);
        },
        options: indicatorOptions,
        "aria-label": "Image " + (index + 1) + " button"
      });
    });
  };

  React.useEffect(function () {
    setWrapperWidth(20 * childCount + 5 * childCount);
  }, [childCount]);
  return /*#__PURE__*/React__default.createElement(Wrapper, {
    style: {
      width: wrapperWidth + "px" || "0px"
    },
    "data-testid": "indicators"
  }, renderIndicators());
};

var getDimensions = function getDimensions(element) {
  if (element) {
    var _element$getBoundingC = element.getBoundingClientRect(),
        width = _element$getBoundingC.width,
        height = _element$getBoundingC.height;

    return {
      width: width,
      height: height
    };
  }

  return {
    width: 500,
    height: 500
  };
};

function _templateObject2$2() {
  var data = _taggedTemplateLiteralLoose(["\n  width: 100%;\n  display: flex;\n  flex-wrap: no-wrap;\n  position: relative;\n  width: ", "px;\n  height: ", "px;\n  padding: 0;\n  margin: 0;\n  list-style: none;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n  transition: transform ease-out ", "s;\n  transform: translate(-", "px, 0);\n"]);

  _templateObject2$2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject$3() {
  var data = _taggedTemplateLiteralLoose(["\n  width: 100%;\n  overflow: hidden;\n  position: relative;\n  max-height: 100%;\n  height: 100%;\n"]);

  _templateObject$3 = function _templateObject() {
    return data;
  };

  return data;
}
var Wrapper$1 = styled.div(_templateObject$3());
var CarouselWrapper = styled.ul(_templateObject2$2(), function (_ref) {
  var width = _ref.width;
  return width;
}, function (_ref2) {
  var height = _ref2.height;
  return height;
}, function (_ref3) {
  var transition = _ref3.transition;
  return transition;
}, function (_ref4) {
  var translateValue = _ref4.translateValue;
  return translateValue;
});

var Carousel = function Carousel(_ref5) {
  var children = _ref5.children;

  var _useContext = React.useContext(store),
      state = _useContext.state,
      dispatch = _useContext.dispatch;

  var activeItem = state.activeItem,
      translateValue = state.translateValue,
      autoPlay = state.autoPlay,
      autoChangeTime = state.autoChangeTime,
      childCount = state.childCount,
      controlsOptions = state.controlsOptions,
      indicatorOptions = state.indicatorOptions,
      activeSlides = state.activeSlides,
      slideTransitionValue = state.slideTransitionValue,
      currentSlideTransition = state.currentSlideTransition;
  var wrapperRef = React.useRef(null);
  var windowWidth = useWindowResizeEvent();
  var autoPlayRef = React.useRef(null);
  var transitionRef = React.useRef(null);

  var handleNext = function handleNext() {
    dispatch({
      type: "setNextItem",
      payload: {
        isLast: activeItem === childCount - 1
      }
    });
  };

  var setActiveSlides = React.useCallback(function () {
    if (Array.isArray(children)) {
      dispatch({
        type: "setActiveSlidesArray",
        payload: children.slice(children.slice(0, activeItem + 3))
      });
      return;
    }

    dispatch({
      type: "setActiveSlidesArray",
      payload: [children]
    });
  }, [children]);
  React.useEffect(function () {
    if (!children) {
      return;
    }

    setActiveSlides();
  }, []);
  React.useEffect(function () {
    autoPlayRef.current = handleNext;
    transitionRef.current = slideTransition;
  });
  React.useEffect(function () {
    if (currentSlideTransition === 0) dispatch({
      type: "setCurrentSlideTransitionValue",
      payload: slideTransitionValue
    });
  }, [currentSlideTransition]);
  React.useEffect(function () {
    var fireTransition = function fireTransition(event) {
      if (event.target.dataset.name !== "carouselWrapper") return;
      transitionRef.current();
    };

    var transitionEnd = window.addEventListener("transitionend", fireTransition);

    if (autoPlay) {
      var play = function play() {
        autoPlayRef.current();
      };

      var interval = setInterval(play, autoChangeTime * 1000);
      return function () {
        clearInterval(interval);
        window.removeEventListener("transitionend", transitionEnd);
      };
    }

    return function () {
      window.removeEventListener("transitionend", transitionEnd);
    };
  }, []);
  React.useEffect(function () {
    dispatch({
      type: "handleWindowResize",
      payload: {
        translateValue: activeItem * getDimensions(wrapperRef.current).width,
        currentSlideTransition: 0
      }
    });
  }, [windowWidth]);
  React.useEffect(function () {
    var _wrapperRef$current$g = wrapperRef.current.getBoundingClientRect(),
        width = _wrapperRef$current$g.width;

    dispatch({
      type: "setCarouselWidth",
      payload: width
    });
  }, [wrapperRef]);

  var slideTransition = function slideTransition() {
    var newActiveSlides = [];
    if (activeItem === children.length - 1) newActiveSlides = [children[children.length - 2], children[children.length - 1], children[0]];else if (activeItem === 0) newActiveSlides = [children[children.length - 1], children[0], children[1]];else newActiveSlides = children.slice(activeItem - 1, activeItem + 2);
    dispatch({
      type: "triggerSlideTransition",
      payload: {
        activeSlides: newActiveSlides,
        translateValue: getDimensions(wrapperRef.current).width,
        currentSlideTransition: 0
      }
    });
  };

  var renderChildren = function renderChildren() {
    return activeSlides.map(function (slide, i) {
      return /*#__PURE__*/React__default.createElement(CarouselItem, {
        key: i,
        index: i,
        overrideFit: slide ? slide === null || slide === void 0 ? void 0 : slide.props["data-itemFit"] : false
      }, slide);
    });
  };

  if (!children) {
    return /*#__PURE__*/React__default.createElement(Wrapper$1, {
      tabIndex: 0,
      ref: wrapperRef,
      "data-testid": "carousel-wrapper-no-children"
    }, /*#__PURE__*/React__default.createElement(CarouselWrapper, {
      translateValue: translateValue,
      style: {
        width: "100%",
        transform: "translate(-" + translateValue + "px, 0)"
      },
      "data-name": "carouselWrapper"
    }, /*#__PURE__*/React__default.createElement("h2", null, "You need to pass some elements in to navigate through!")));
  }

  return /*#__PURE__*/React__default.createElement(Wrapper$1, {
    tabIndex: 0,
    ref: wrapperRef,
    "data-testid": "carousel-wrapper"
  }, controlsOptions.show && activeSlides.length > 1 && /*#__PURE__*/React__default.createElement(CarouselButton, {
    previous: true
  }), /*#__PURE__*/React__default.createElement(CarouselWrapper, {
    translateValue: translateValue,
    width: getDimensions(wrapperRef.current).width * activeSlides.length,
    height: getDimensions(wrapperRef.current).height,
    transition: currentSlideTransition,
    "data-name": "carouselWrapper"
  }, renderChildren()), controlsOptions.show && activeSlides.length > 1 && /*#__PURE__*/React__default.createElement(CarouselButton, null), indicatorOptions.show && activeSlides.length > 1 && /*#__PURE__*/React__default.createElement(Indicators, null));
};

var SimpleCarousel = function SimpleCarousel(_ref) {
  var children = _ref.children,
      autoPlay = _ref.autoPlay,
      autoChangeTime = _ref.autoChangeTime,
      showIndicators = _ref.showIndicators,
      contentCoversContainer = _ref.contentCoversContainer,
      itemFit = _ref.itemFit,
      controlsOptions = _ref.controlsOptions,
      indicatorOptions = _ref.indicatorOptions;
  return /*#__PURE__*/React__default.createElement(StateProvider, {
    childCount: children ? children.length : 0,
    autoPlay: autoPlay,
    autoChangeTime: autoChangeTime,
    showIndicators: showIndicators,
    contentCoversContainer: contentCoversContainer,
    itemFit: itemFit,
    controlsOptions: controlsOptions,
    indicatorOptions: indicatorOptions
  }, /*#__PURE__*/React__default.createElement(Carousel, null, children));
};

module.exports = SimpleCarousel;
//# sourceMappingURL=index.js.map
